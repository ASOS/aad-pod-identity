# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

executors:
  go-executor:
    docker:
      - image: circleci/golang:1.11.2-node
    working_directory: /go/src/github.com/Azure/aad-pod-identity

jobs:

  build-and-run-unit-tests:
    executor: go-executor
    steps:
      - checkout

      - run: go get -v -t -d ./...
      - run: go test -v $(go list ./... | grep -v test/e2e)


  run-e2e-tests:
    executor: go-executor
    steps:
      - checkout

      - run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

          sudo apt-get install apt-transport-https lsb-release software-properties-common -y
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
          sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-key --keyring /etc/apt/trusted.gpg.d/Microsoft.gpg adv \
            --keyserver packages.microsoft.com \
            --recv-keys BC528686B50D79E339D3721CEB3E94ADBE1229CF
          sudo apt-get update
          sudo apt-get install azure-cli

      - run: |
          echo $AKS_CLUSTER_CA_DATA | base64 --decode > cluster.ca.crt
          kubectl config set-cluster e2e --server=$AKS_CLUSTER --insecure-skip-tls-verify=true

          echo $AKS_CLUSTER_CLIENT_CERT | base64 --decode > client.crt
          echo $AKS_CLUSTER_CLIENT_KEY | base64 --decode > key.crt
          kubectl config set-credentials clusterUser --client-certificate=client.crt --client-key=key.crt --embed-certs=true --token=$AKS_CLUSTER_CLIENT_TOKEN

          kubectl config set-context e2e-context --cluster=e2e --user=clusterUser
          kubectl config use-context e2e-context
          kubectl get pods
      
      - run: go get -v -t -d ./...
      
      # For security purposes, circleci requires this step to isolate remote docker commands. 
      # More info at: https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker

      - run: |
          echo $DOCKER_REGISTRY_SERVER_PASSWORD | docker login -u $DOCKER_REGISTRY_SERVER_USERNAME --password-stdin

          export NMI_VERSION='1.4-build-'${CIRCLE_BUILD_NUM}
          export MIC_VERSION='1.4-build-'${CIRCLE_BUILD_NUM}
          export DEMO_VERSION='1.4-build-'${CIRCLE_BUILD_NUM}
          export IDENTITY_VALIDATOR_VERSION='1.4-build-'${CIRCLE_BUILD_NUM}

          make build
          make image
          make push

          az login --service-principal -u $AZURE_SPN_NAME -p $AZURE_SPN_PASSWORD --tenant $AZURE_TENANT > /dev/null 2>&1
          make e2e

          docker logout

  publish-beta-images:
    executor: go-executor
    steps:
      - checkout

      - run: sudo npm i -g snyk
      
      # For security purposes, circleci requires this step to isolate remote docker commands. 
      # More info at: https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker

      - run: |
          echo $DOCKER_REGISTRY_SERVER_PASSWORD | docker login -u $DOCKER_REGISTRY_SERVER_USERNAME --password-stdin

          
          export NMI_VERSION='1.4-beta-'${CIRCLE_BUILD_NUM}
          export MIC_VERSION='1.4-beta-'${CIRCLE_BUILD_NUM}
          export REGISTRY=$BETA_REGISTRY
          
          make build-nmi && make build-mic
          make image-nmi && make image-mic

          snyk test --docker $REGISTRY/nmi:$NMI_VERSION
          snyk test --docker $REGISTRY/nmi:$MIC_VERSION

          make push-nmi && make push-mic

          docker logout

workflows:
  version: 2
  build_and_test:
    jobs:
      - build-and-run-unit-tests

      - run-e2e-tests

      - publish-beta-images:
          requires:
            - build-and-run-unit-tests
            - run-e2e-tests